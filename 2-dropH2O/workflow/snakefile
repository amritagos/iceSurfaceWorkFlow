import numpy as np
import pandas as pd
from pathlib import Path
import json

# Path to results directory of previous workflow
relaxed_surface_results_dir = Path("/home/amritagos/Git/Github/iceSurfaceWorkFlow/1-relax_analyze_surfaces/results")
ISOLATED_WATER_ENERGY = 0.0
ADSORBATE_DISTANCE_FROM_SURFACE = 1.0 # in Angstrom, previously 2.0
# SET_PBCS = 0 # If set to 0, disable PBC and shift admolecule to the center of the box.  
DISABLE_PBC = True # If true then run a single point calculatn ,bjion that turns off PBCs for the binding energy  

# Get the aggregated information for the surfaces 
surface_aggregate_path = relaxed_surface_results_dir / "surfaces_aggregated.csv"
surface_data_df = pd.read_csv(surface_aggregate_path)

with open("config/input_dict.json", "r") as f:
    input_dict = json.load(f)

SAMPLES = list(input_dict.keys())

rule all:
    input: 
        # expand("results/data/{sample}/metadata.json", sample=SAMPLES),
        # expand("results/data/{sample}/system.xyz", sample=SAMPLES),
        "results/aggregated.csv"

rule drop_h2o:
    input:
        surface_file = lambda wc : relaxed_surface_results_dir / f"surface_relax/{input_dict[wc.sample][0]}/surface_seed_{input_dict[wc.sample][0]}.xyz",
        site_file = lambda wc: relaxed_surface_results_dir / f"surface_relax/{input_dict[wc.sample][0]}/{input_dict[wc.sample][1]}_sites_seed_{input_dict[wc.sample][0]}.npy",
    params:
        seed = lambda wc: input_dict[wc.sample][0],
        site_type = lambda wc: input_dict[wc.sample][1],
        site_idx = lambda wc: input_dict[wc.sample][2],
        surface_energy = lambda wc : input_dict[wc.sample][3],
        distance_to_surface = ADSORBATE_DISTANCE_FROM_SURFACE
    output:
        metadata_file = "results/data/{sample}/metadata.json",
        xyz_file = "results/data/{sample}/system.xyz",
    shell:
        "python workflow/scripts/drop_h2o.py --input_surface_path {input.surface_file} --site_path {input.site_file} --seed {params.seed} --site_type {params.site_type} --site_index {params.site_idx} --surface_energy {params.surface_energy} --distance_to_surface {params.distance_to_surface} --out_metadata {output.metadata_file} --out_xyz {output.xyz_file}"

if DISABLE_PBC:
    rule turn_pbc_off:
        input: 
            xyz = rules.drop_h2o.output.xyz_file,
            metadata = rules.drop_h2o.output.metadata_file
        output:
            metadata_file = "results/data_no_pbc/{sample}/metadata.json",
            xyz_file = "results/data_no_pbc/{sample}/system.xyz",
            displacement = "results/data_no_pbc/{sample}/displacement.npy"
        shell:
            "python workflow/scripts/no_pbc.py --input_path {input.xyz} --input_metadata {input.metadata} --out_metadata {output.metadata_file} --out_xyz {output.xyz_file}"

    rule pbc_off_surface:
        input: 
            xyz = lambda wc : relaxed_surface_results_dir / f"surface_relax/{input_dict[wc.sample][0]}/surface_seed_{input_dict[wc.sample][0]}.xyz",
            displacement = rules.turn_pbc_off.output.displacement,
            metadata = rules.turn_pbc_off.output.metadata_file
        output:
            metadata = "results/data_no_pbc/{sample}/final_metadata.json",
            xyz = "results/data_no_pbc/{sample}/surface_system.xyz"
        shell:
            "python workflow/scripts/no_pbc_surface.py --input_surface_path {input.xyz} --displacement_path {input.displacement} --input_metadata {input.metadata} --out_metadata {output.metadata} --out_xyz {output.xyz}"

aggregate_input = rules.drop_h2o.output.metadata_file
if DISABLE_PBC:
    aggregate_input = rules.pbc_off_surface.output.metadata

rule aggregate:
    input:
        result_paths = expand(aggregate_input, sample=SAMPLES),
    params:
        water_energy = ISOLATED_WATER_ENERGY
    output:
        "results/aggregated.csv"
    shell:
        "python workflow/scripts/aggregate.py --result_paths {input.result_paths} --isolated_water_energy {params.water_energy} --output_csv {output}"